import dayjs from "dayjs";
import type { NextPage } from "next";
import Head from "next/head";
import { useState } from "react";
import { ConditionallyVisible } from "../components/ConditionallyVisible";
import { SlideToggle } from "../components/SlideToggle";
import { TimerComponent } from "../components/Timer";
import { trpc } from "../utils/trpc";
import { useUIStateStore } from "./_app";

const Timer: NextPage = () => {
  const { data: solveSession, refetch } =
    trpc.solveSession.getCurrentSession.useQuery();

  const getFormattedTime = (time: dayjs.Dayjs) => {
    let formatString = "";
    if (time.utc().hour() >= 1) {
      formatString = "HH:mm:ss.SSS";
    } else {
      if (time.utc().minute() >= 1) {
        formatString = "mm:ss.SSS";
      } else {
        formatString = "ss.SSS";
      }
    }
    return time
      .utc()
      .format(formatString)
      .substring(0, formatString.length - 2);
  };

  const uiState = useUIStateStore();

  const [showStats, setShowStats] = useState(false);

  const [useInspection, setUseInspection] = useState(false);

  return (
    <div className="flex h-full w-full flex-col bg-black pb-4">
      <Head>
        <title>rubik-scramble</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <TimerComponent useInspection={useInspection} />
      <ConditionallyVisible visibleOn={!uiState.hidden} className="">
        <div className="flex flex-grow flex-col items-center gap-1 text-lg">
          <div className="flex items-center gap-1 ">
            <span>last:</span>
            <span>
              {solveSession &&
              solveSession.puzzleSolves[
                solveSession.puzzleSolves.length - 1
              ] ? (
                <p>
                  {getFormattedTime(
                    dayjs(
                      solveSession.puzzleSolves.sort((a, b) =>
                        b.timeStamp < a.timeStamp ? 1 : -1
                      )[solveSession.puzzleSolves.length - 1]?.time
                    )
                  )}
                </p>
              ) : (
                "not set"
              )}
            </span>
          </div>
          <div className="flex items-center gap-1">
            <span>best:</span>
            <span>
              {solveSession &&
              solveSession.puzzleSolves[
                solveSession.puzzleSolves.length - 1
              ] ? (
                <p>
                  {getFormattedTime(
                    dayjs(
                      solveSession.puzzleSolves.sort((a, b) =>
                        b.time > a.time ? 1 : -1
                      )[solveSession.puzzleSolves.length - 1]?.time
                    )
                  )}
                </p>
              ) : (
                "not set"
              )}
            </span>
          </div>
          <div className="text-md mt-3 flex select-none flex-col items-center justify-center gap-2">
            <p>Inspection Period?</p>
            <SlideToggle
              stateVar={useInspection}
              stateSet={setUseInspection}
            ></SlideToggle>
          </div>
          <div className="mt-3 w-60 space-y-4 text-center text-sm">
            <p>{"{space} to start/stop timer"}</p>
            <p>{"{n} for next scramble"}</p>
            <p>hold space until timer goes green then release to start</p>
          </div>
        </div>
      </ConditionallyVisible>
    </div>
  );
};

export default Timer;
